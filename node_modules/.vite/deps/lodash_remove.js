import {
  require_baseIteratee,
  require_last,
  require_parent
} from "./chunk-76CAP5MS.js";
import {
  require_isIndex
} from "./chunk-LBECEHB7.js";
import "./chunk-OYJ4MWN3.js";
import "./chunk-UWWDN6GL.js";
import {
  require_castPath,
  require_toKey
} from "./chunk-AQLWSHTH.js";
import "./chunk-YHC3YTQO.js";
import "./chunk-4CUKOT3B.js";
import "./chunk-GYJAZCPL.js";
import "./chunk-JOUL7U36.js";
import "./chunk-EVVZLFW7.js";
import {
  __commonJS
} from "./chunk-EWTE5DHJ.js";

// node_modules/lodash/_baseUnset.js
var require_baseUnset = __commonJS({
  "node_modules/lodash/_baseUnset.js"(exports, module) {
    var castPath = require_castPath();
    var last = require_last();
    var parent = require_parent();
    var toKey = require_toKey();
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }
    module.exports = baseUnset;
  }
});

// node_modules/lodash/_basePullAt.js
var require_basePullAt = __commonJS({
  "node_modules/lodash/_basePullAt.js"(exports, module) {
    var baseUnset = require_baseUnset();
    var isIndex = require_isIndex();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0, lastIndex = length - 1;
      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }
    module.exports = basePullAt;
  }
});

// node_modules/lodash/remove.js
var require_remove = __commonJS({
  "node_modules/lodash/remove.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var basePullAt = require_basePullAt();
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1, indexes = [], length = array.length;
      predicate = baseIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }
    module.exports = remove;
  }
});
export default require_remove();
//# sourceMappingURL=lodash_remove.js.map
